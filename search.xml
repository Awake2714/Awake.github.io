<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript—Math对象]]></title>
    <url>%2F2019%2F07%2F28%2F34_Math%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[Math对象 var a = 10.6; floor 地板函数：向下取整var aa = Math.floor(a); document.write(aa); //10 ceil 天花板函数：向上取整var bb = Math.ceil(a); document.write(&apos;&lt;br&gt;&apos;+bb); //11 max 最大值var cc = Math.max(aa,bb); document.write(&apos;&lt;br&gt;&apos;+cc); //11 min 最小值var dd = Math.min(12,15); document.write(&apos;&lt;br&gt;&apos;+dd); //12 round 四舍五入var ee = Math.round(a); document.write(&apos;&lt;br&gt;&apos;+ee); //11 random 随机数 0-1//生成0-1之间的随机数 var x = Math.random(); document.write(&apos;&lt;br&gt;&apos;+x); //0.7075256283328961 //生成指定范围内的随机数：min+Math.random()*(max-min) var y = 100+Math.random()*(500-100); //生成100-500之间的随机数 document.write(&apos;&lt;br&gt;&apos;+y); //445.1153017063139 其他函数： abs（绝对值）、sin（正弦）、cos（余弦）、tan（正切）、exp（指数）、pow（幂）、log（对数）、sqrt（平方根）……]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript—日期对象]]></title>
    <url>%2F2019%2F07%2F28%2F33_Date%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[Date()日期对象 getDate()：获取月份中的天数 getMonth()：获取月份 0-11 getFullYear()：获取年份 getDay()：获取一周中的天数 0-6 getHours()：获取小时数 getMinutes()：获取分钟数 getSeconds()：获取秒 Date()：获取完整的时间 年月日时分秒var mydate = new Date(); console.log(mydate.getDate()); //28 console.log(mydate.getMonth()); //6 console.log(mydate.getFullYear()); //2019 console.log(mydate.getDay()); //0 console.log(mydate.getHours()); //17 console.log(mydate.getMinutes()); //29 console.log(mydate.getSeconds()); //15 console.log(mydate); //Sun Jul 28 2019 17:29:15 GMT+0800 (中国标准时间)]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript—数组]]></title>
    <url>%2F2019%2F07%2F28%2F32_%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Array的创建和方法 创建 字面量创建 var array_a = []; array_a[0] = 123; array_a[1] = 456; console.log(array_a); --- var array_c = [1,2,3,4,5]; for (var i = array_c.length - 1; i &gt;= 0; i++) { document.write(array_c[i]+&apos;&lt;br&gt;&apos;); } 构造函数创建 var array_b = new Array(); array_b[0] = &apos;傻逼&apos;; array_b[1] = &apos;憨批&apos;; array_b[2] = &apos;宝批龙&apos;; console.log(array_b); 方法var a = [&apos;你&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;宝批龙&apos;,&apos;！&apos;]; var b = [&apos;你&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;大傻逼&apos;,&apos;！&apos;]; concat：合并两个数组console.log(a.concat(b)); //[&apos;你&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;宝批龙&apos;,&apos;！&apos;,&apos;你&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;大傻逼&apos;,&apos;！&apos;] join：用字符连接数组，返回字符串var c = a.join(&apos; &apos;); console.log(c); //你 是 一个 宝批龙 ！ slice：切片 左闭右开var d = a.slice(2,4); console.log(d); //[&apos;一个&apos;,&apos;宝批龙&apos;] pop：删除最后一个元素b.pop(); console.log(b); //[&apos;你&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;大傻逼&apos;] push：在数组最后添加元素b.push(&apos;！！！&apos;); console.log(b); //[&apos;你&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;大傻逼&apos;,&apos;！&apos;]; shift：在数组第一个位置删除a.shift(); console.log(a); //[&apos;是&apos;,&apos;一个&apos;,&apos;宝批龙&apos;,&apos;！&apos;] unshift：在数组第一个位置添加元素a.unshift(&apos;他&apos;); console.log(a); //[&apos;他&apos;,&apos;是&apos;,&apos;一个&apos;,&apos;宝批龙&apos;,&apos;！&apos;] reverse：翻转元素a.reverse(); console.log(a); //[&apos;！&apos;,&apos;宝批龙&apos;,&apos;一个&apos;,&apos;是&apos;,&apos;他&apos;] sort：排序b.sort(); console.log(b); //[&quot;一个&quot;, &quot;你&quot;, &quot;大傻逼&quot;, &quot;是&quot;, &quot;！！！&quot;]]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript—字符串]]></title>
    <url>%2F2019%2F07%2F28%2F31_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[String的创建和方法 创建 字面量创建var b = &apos;这是一个字符串&apos;; document.write(b); 构造函数创建var a = new String(); a = &apos;这是一个蛤蟆皮&apos;; document.write(a); 方法 charAt &gt; 根据索引查找字符console.log(a.charAt(1)); //是 indexOf &gt; 根据字符查找索引console.log(a.indexOf(&apos;个&apos;)); //3 concat &gt; 连接两个字符串console.log(a.concat(b)); //这是一个蛤蟆皮这是一个字符串 slice 切片 左闭右开var c = b.slice(2,7); console.log(c); //一个字符串 split 分割var d = b.split(&apos;一个&apos;); console.log(d); //[&apos;这是&apos;,&apos;字符串&apos;] replace 替换var e = a.replace(&apos;蛤蟆皮&apos;,&apos;大傻逼&apos;); console.log(e); //这是一个大傻逼 toLowerCase 转小写var f = &apos;I LOVE YOU&apos;; var m = f.toLowerCase(); console.log(m) //i love you toUpperCase 转大写var f = &apos;i love you&apos;; var n = f.toUpperCase(); console.log(n) //I LOVE YOU]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript—运算符]]></title>
    <url>%2F2019%2F07%2F28%2F30_%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[JavaScript的运算符有这么这么多 算术运算符+(加) -(减) *(乘) /(除) %(取余) ++(自增) –(自减) 赋值运算符= += -= /= %= 逻辑运算符&amp;&amp;：and||：or!：not var c = 4, d = 8; if (c&lt;10 &amp;&amp; d&lt;10) { console.log(&apos;&amp;&amp; and运算符&apos;); } if (c&lt;5 || d&lt;7) { console.log(&apos;|| or运算符&apos;); } if (!(c&gt;d)) { console.log(&apos;! not运算符&apos;); } 比较运算符==：比较的是值===：比较的值和数据类型!=：比较的值!==：比较的值和数据类型>&lt;>=&lt;= var a = 1, b = &apos;1&apos;; console.log(a==b); //true console.log(a===b); //false console.log(a!=b); //false console.log(a!==b); //true]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript—数据类型]]></title>
    <url>%2F2019%2F07%2F28%2F29_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[JavaScript的数据类型包含值类型和引用数据类型 值类型 数字：number 字符串：string 布尔型：boolean 对空：null 未定义：undefined 引用数据类型 数组：array 对象：object 函数：function在后面的文章中，会细细地来学习每种数据类型[幽灵.emoji]]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript—变量]]></title>
    <url>%2F2019%2F07%2F28%2F28_%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[开始学习JavaScript(搬砖)的日子。 变量的命名和大多数语法类似，JavaScript的变量命名： 必须以字母开头 可以以下划线_和$符开头，but，不建议 对大小写敏感 变量的声明和创建 //声明变量并赋值 var A = 4; window.alert(A); //先声明变量再赋值 var a, b, c; a = 1; b = 2; c = 3; document.write(a+b+c); //一行代码声明多个变量：中间用“,”分开 var I = &apos;I &apos;, L = &apos;Love &apos;, Y = &apos;You &apos;; document.write(&apos;&lt;br&gt;&apos;+I+L+Y);]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[努力生活]]></title>
    <url>%2F2019%2F07%2F25%2F27_%E5%8A%AA%E5%8A%9B%E7%94%9F%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[小舒上班已经快两周了，这两周仿佛在渡劫。在我这个年纪，出现了不该有的多愁善感。在路上看到老爷爷老奶奶，会想起在天堂的爷爷和独自在家的奶奶；下班偶尔聊起工作，总感觉自己力不从心、微不足道；和好久没有联系的室友聊聊天，就会想起我们在宿舍的点点滴滴，仿佛暑假过后我都没有开心过了。下周五是我21岁的生日，我以前总是希望在我生日的时候希望有个蛋糕；而这次生日，我渴望的不是蛋糕，也不是三岁以上就能吃的果冻，而是多么希望小野能来陪我。她不是什么特别的人，我们在一起的时候也有不愉快，可是，她总能让我感到开心。我甚至祈求她能出现，似乎像是一棵救命稻草！我还是努力调解自己的情绪，安慰自己：有时,生活是可以将就的。抱怨过后，还是继续努力，继续努力生活，努力开心。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>日记</tag>
        <tag>心情</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端——CSS学习]]></title>
    <url>%2F2019%2F07%2F21%2F26_css%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[上班已经一周了，今天也算是结束了对html和css的学习，算是一个小小的终点，同时，也是新的起点。加油啊，小舒舒 ↖(^ω^)↗说实话，这前端里面的坑还真的多啊不过，在我呕心沥血之后，终于搞出了这么个思维导图，谨以此祭奠我。。。痛并流淌的大姨妈。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端——html标签学习]]></title>
    <url>%2F2019%2F07%2F21%2F25_html%E6%A0%87%E7%AD%BE%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[做人就要不怕困难，终身学习。在我们口号的推动下(……)，最近开始了学习前端，才发现在学校学到的东西真的很少啊。（小声逼逼：其实是我没有认真上课）为了不断提升自己的（economy）实力，我开始补课了下面这张图是我在学习html标签时的一个思维导图，留给自己复习用。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[哦买噶！这也太难了吧！]]></title>
    <url>%2F2019%2F07%2F15%2F24_%E8%BF%99%E4%B9%9F%E5%A4%AA%E9%9A%BE%E4%BA%86%E5%90%A7%2F</url>
    <content type="text"><![CDATA[没有想象中的那么激动、兴奋，反而狼狈、难受、想捅人。滴~今天也算是我入职的第一天吧，莫名其妙的就入了职，没有什么准备也没有什么反抗早上去的时候还好，直到下午…直到…经理说：明天记得带电脑（我：可以经理说：以后你可以每天带电脑回去，也可以周五的时候带回去（我：…经理说：这儿还是挺安全的（我：…艹，劳资以后上班要从成都北门背电脑背到南门，然后又从南门背回北门吗？？？还笑嘻嘻给我来一句还是挺安全的，谁TM给你笑嘻嘻了啊？你TM下班回家不用电脑啊？？你TM欺负实习生是吧？明明新员工指引清单上面说好的电脑！！！现在给我搞没了？？你说气人不气人？？你觉得这样就够惨了是吗？NO！出门小雨变大雨，是不是再得配上一首悲伤一点的背景音乐？手里捧着窝窝头，菜里没有一滴油在天府三街刚好冲进1号线，深刻的感受了站车站到人去车空的感觉；到了火车北站，又急急忙忙地打开导航去站公交。不知道今年是咋滴了，天天下雨，穿的粗跟凉鞋，感觉自己都要滑倒了，不，感觉我的凉鞋都要脱胶了。跨过天桥，我，终于来到了公交站，挤上了一辆小小的24路公交车，再次体验了一把从起点站到终点的感觉，啊！就这个feel倍儿爽！在车上就开始了我无止境的抱怨和难过，操这麻蛋的人生，最后总结出我的痛苦都来源于家到公司的距离太远了，表象就是没有租房，深层次的原因就是：对的，一定是这样的！所以我今天回家用了整整两个小时！所以以后不配电脑的话，我要背着15.6英寸的电脑横贯成都！啊！变有钱，我变有钱！]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七月的你]]></title>
    <url>%2F2019%2F07%2F10%2F23_%E4%B8%83%E6%9C%88%E7%9A%84%E4%BD%A0%2F</url>
    <content type="text"><![CDATA[回学校参加了期末考试，已经很久很久没有更博了。最近经历的事真多，很匆忙，又很充实，有欢乐，也有别离。回学校参加完第一场考试后，朋友说去重庆玩，我们就去了。像一场说走就走的旅行，没有带好看的衣服，也没有化妖艳的妆。第一天傍晚我们去了磁器口，第二天去了李子坝→解放碑→梵高星空艺术馆→科技馆→朝天门火锅→洪崖洞，第三天去了海底世界说实话，重庆留给我的印象并不没有那么好，磁器口、洪崖洞全是卖东西的；海底世界全是小孩，虽然去之前我们也安慰自己要有一颗童心，可是真的真jb难耍啊；吃了一家叫做朝天门火锅的火锅，真没有咱成都的好吃；我只会感叹重庆轻轨的工程师们太牛逼了！我不喜欢重庆，我只是喜欢和朋友一起的时光，毕竟至少和她一起睡觉的时候，我睡得很安稳 ପ( ˘ᵕ˘ ) ੭ ☆回来第三天进行了最后一场考试，班长说开完班会后，大家留下来照个相，因为爸爸妈妈要来接我，所以我逃了。坐在车上的时候最容易胡思乱想，想着想着居然有些难过。宿舍被搬得空唠唠的，明明是大三，却搞得像大四毕业一样。不过我会想我的331的，有钱江湖再见，欢迎他们来成都请我吃火锅！^o^难过又觉得好幸福，世界对我深深的恶意都不见了。好像爸爸妈妈都好爱我，好像有这么些室友也挺开心，好像一切都很平静 大自然也太美了吧我是不想回老家的，老家的蚊子可真多啊！今天一大早，门前那棵大树被锯倒了。奶奶说这棵树有20年了，还是我出生那年栽的。她说，爷爷以前说种棵树在这里，看它长得直不直。爷爷走了四年了，今天陪我长大的这棵树也倒了。【以前爷爷挑粪，我撵他的路，他走一步我跟一步，他就把我捆在这颗树上哈哈哈哈以前最不耐烦的就是老年人的念叨。和奶奶摆着龙门阵，她看着我，突然就来一句，你多吃点嘛，好瘦啊，在家待了一天我至少听了四五遍。我想说我不瘦啊，有一种瘦，叫做奶奶以为你瘦[允悲.jpg] 我爷爷年轻的时候一定很帅吧嘿嘿嘿最近有人问我眼睛周围是怎么回事，其实我无所谓啦。妈妈说以前小时候没有，怎么长大了就现出来了；奶奶说眼睛里面有朵云；爷爷说生下来的胎记，免得你走错人家了；知乎说，这是被天使吻过的痕迹，不是每一个人都能被天使亲吻的。我觉得没有什么大不了的，并不妨碍我的生活，我一点也不自卑，我觉得挺好的。❤我有一个小小的愿望，就是挣很多很多的钱哈哈哈哈，然后给我朋友买车票，让他们来请我吃火锅；给奶奶买车票，让她和我一起长胖。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[钗头凤]]></title>
    <url>%2F2019%2F06%2F19%2F22_%E9%92%97%E5%A4%B4%E5%87%A4%2F</url>
    <content type="text"><![CDATA[果然，还是喜欢这首诗 ❤ 陆游红酥手，黄藤酒，满城春色宫墙柳；东风恶，欢情薄，一杯愁绪，几年离索，错！错！错！春如旧，人空瘦，泪痕红浥鲛绡透；桃花落，闲池阁，山盟虽在，锦书难托，莫！莫！莫！ 唐婉世情薄，人情恶，雨送黄昏花易落；晓风乾，泪痕残，欲笺心事，独语斜阑，难！难！难！人成各，今非昨，病魂常似秋千索；角声寒，夜阑珊，怕人寻问，咽泪妆欢，瞒！瞒！瞒！]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这个杀手不太冷]]></title>
    <url>%2F2019%2F06%2F19%2F21_%E6%97%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[春水春池满，春时春草生。春人饮春酒，春鸟弄春声。君生我未生，我生君已老。君恨我生迟，我恨君生早。人归万里外，意在一杯中。只虑前程远，开帆待好风。自入长信宫，每对孤灯泣。闺门镇不开，梦从何处入。一别行千里，来时未有期。月中三十日，无夜不相思。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>心情</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归]]></title>
    <url>%2F2019%2F06%2F13%2F20_%E9%80%92%E5%BD%92%2F</url>
    <content type="text"><![CDATA[在一个函数内部可以调用其他函数，也可以自己调用自己，在函数内部自己调用自己就叫做递归递归的出口：当函数满足某一条件时不再执行 写一个递归 def sum_nums(num): print(num) sum_nums(num-1) sum_nums(3) &gt;&gt;&gt;RecursionError: maximum recursion depth exceeded while calling a Python object 这样的输出会报错，为什么呢？因为我们说递归是有出口的，递归有深度，如果没有出口就会溢出 将代码改良 def nums(num): print(num) if num==1: return nums(num-1) nums(3) &gt;&gt;&gt;3 2 1 给递归指定了一个出口，当num=1时，就直接return 递归累加求和：1+2+3+…+n def sum_nums(num): if num==1: return 1 temp = num-1 return num+sum_nums(temp) results = sum_nums(3) print(results) &gt;&gt;&gt;6 同理，累乘：1*2*3*…*n def sum_nums(num): if num==1: return 1 temp = num-1 return num*sum_nums(temp) results = sum_nums(5) print(results) &gt;&gt;&gt;120 推荐教程：https://www.bilibili.com/video/av14184325/?p=357 今天也是努力的一天 ↖(^ω^)↗]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单例设计模式]]></title>
    <url>%2F2019%2F06%2F13%2F19_%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[这两天在看面试资料，发现有好多东西都忘了，开始查漏补缺，终于弄懂了单例设计模式是个什么鬼我们知道__init__方法是初始化方法，那么__new__方法呢？__new__方法在创建对象时会自动调用，作用是为创建对象，对象分配空间单例模式就是让类创建的对象在系统中只有唯一一个实例，即每次返回的对象的内存地址是相同的 没有用到单例模式时的输出 class MusicPlayer(object): def __init__(self): print(&apos;初始化方法&apos;) player1 = MusicPlayer() player2 = MusicPlayer() print(player1) print(player2) #创建两个对象，那么返回的内存地址是不一样的，输出 &gt;&gt;&gt;初始化方法 初始化方法 &lt;__main__.MusicPlayer object at 0x0000000000B1B278&gt; &lt;__main__.MusicPlayer object at 0x0000000000B1B2E8&gt; 那么如何让两个对象的内存地址一样呢，这就要用到单例模式，要写一个单例模式就要用到__new__方法 写一个单例模式 class MusicPlayer(object): def __new__(cls, *args,**kwargs): print(&apos;创建对象，分配空间&apos;) instance = super().__new__(cls) #调用父类的方法，为对象分配空间 return instance #返回对象保存在内存空间的引用，一定要返回，否则__init__接收不到 def __init__(self): print(&apos;初始化方法&apos;) player1 = MusicPlayer() print(player1) player2 = MusicPlayer() print(player2) &gt;&gt;&gt;创建对象，分配空间 初始化方法 &lt;__main__.MusicPlayer object at 0x000000000105B2E8&gt; 创建对象，分配空间 初始化方法 &lt;__main__.MusicPlayer object at 0x00000000010FCE80&gt; 如果__new__没有返回对象的引用会发生什么呢？ 如果没有return instance会发生什么？ class MusicPlayer(object): def __new__(cls, *args,**kwargs): print(&apos;创建对象，分配空间&apos;) super().__new__(cls) #调用父类的方法，为对象分配空间 def __init__(self): print(&apos;初始化方法&apos;) player1 = MusicPlayer() print(player1) &gt;&gt;&gt;创建对象，分配空间 None 诶，我们可以看到，如果没有return instance，__init__方法就不会执行，所以一定要返回对象的引用。 单例模式的完善现在将这个代码完善一下，让他如果是第一个对象就为他分配空间，否则，就直接沿用上一个对象的分配空间 class MusicPlayer(object): instance = None #定义一个类属性为空对象 def __new__(cls, *args,**kwargs): if cls.instance is None: #判断instance是否为空对象 cls.instance = super().__new__(cls) #如果是空对象，那么就为对象分配空间，保存在instance中 return cls.instance #返回对象的引用 player = MusicPlayer() print(player) player2 = MusicPlayer() print(player2) &gt;&gt;&gt;&lt;__main__.MusicPlayer object at 0x0000000000A7B240&gt; &lt;__main__.MusicPlayer object at 0x0000000000A7B240&gt; 初始化动作只执行一次在上面的代码中我们可以看到，如果有两个player对象，单例模式返回相同的内存地址，但是，创建了两个对象就执行了两次__init__，那么怎么让代码只执行一次呢？ class MusicPlayer(object): instance = None init_flag = False #定义一个是否执行初始化动作的标记，设置为False def __new__(cls, *args,**kwargs): print(&apos;创建对象、分配空间&apos;) if cls.instance is None: cls.instance = super().__new__(cls) return cls.instance def __init__(self): if self.init_flag: #如果执行了则直接返回 return print(&apos;初始化方法&apos;) #如果没有执行，则执行初始化动作 self.init_flag = True #修改初始化标记 player = MusicPlayer() print(player) player2 = MusicPlayer() print(player2) &gt;&gt;&gt;创建对象、分配空间 初始化方法 &lt;__main__.MusicPlayer object at 0x0000000000A7B240&gt; 创建对象、分配空间 &lt;__main__.MusicPlayer object at 0x0000000000A7B240&gt;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python爬取百度翻译]]></title>
    <url>%2F2019%2F06%2F02%2F18_%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%2F</url>
    <content type="text"><![CDATA[今天来捣鼓了一下百度翻译目标网址：https://fanyi.baidu.com 表单数据里面有个sign需要获取，这需要执行js代码。 表单数据里还有一个token，网上有些资料是从请求https://fanyi.baidu.com 的源代码里用正则提取出来的，但是我试了不行。提取出来的和浏览器上看到的并不一样。卡了很久，发现他似乎是没有变的，所以直接给copy过来了。 请求头里面有个cookie，这个好像也是很久没有变的，So，可以直接从浏览器的开发者工具里面复制过来。 目标 实现自动翻译 了解js代码的调试 熟悉pyexecjs库的基本操作 获取签名通过执行js代码获取sign这一步需要使用到pyexecjs库，基本操作 sign = execjs.compile(js).call(‘e’, word)#执行js代码，将word传给函数e 发起请求我们在这里没有定义输入输出语种，仅设置表单数据里的“from”和“key”键的值为“auto”（自动）需要对百度翻译的字符串解码后返回解析 return r.text.encode(‘utf-8’).decode(‘unicode_escape’) 解析网页获取翻译后的内容，呈现给用户 定义了一个循环，当用户输入“n”时，退出程序，否则继续翻译 完整代码地址：https://github.com/Awake2714/BaiduFanyi （喜欢的话给我一个小星星好吗(*^__^*) 嘻嘻……）参考视频教程：https://www.bilibili.com/video/av25542134?t=1152]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python装饰器]]></title>
    <url>%2F2019%2F06%2F01%2F16_%E8%A3%85%E9%A5%B0%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Python的装饰器是在不影响原有函数的功能的基础上，还能添加新的功能如果理解到了闭包，那么就能很好理解装饰器了。要使用一个装饰器，就在函数上方添加一行代码：@装饰器 写一个装饰器函数 def func1(func): #外部闭包函数是被装饰的函数对象&nbsp;&nbsp;&nbsp;&nbsp;print(‘mua~’)&nbsp;&nbsp;&nbsp;&nbsp;def func2():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(‘hi’)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return func() #返回外部函数接受的被装饰函数的调用&nbsp;&nbsp;&nbsp;&nbsp;return func2 #返回了函数对象@func1def myprint():&nbsp;&nbsp;&nbsp;&nbsp;print(‘hello’)myprint() # func1(myprint)() #接受被装饰的函数作为参数，并继续调用一次>&gt;&gt;mua~>&gt;&gt;hi>&gt;&gt;hello 定义一个func1函数，内部嵌套func2并返回func2函数对象；在func2内部返回了对func()的调用在这里我们就对myprint函数使用了装饰器函数func1，@func1 相当于执行func1(myprint)()：将myprint函数对象作为参数传给func1并执行了一次调用，得到一条print语句和返回的func2对象，又执行了func2()，返回func()的调用，这里的func就是func1接受过来的参数myprint 这个装饰器除了执行被装饰的函数myprint的代码，还执行了func1内部的代码 带参数的装饰器函数 def func1(sex):&nbsp;&nbsp;&nbsp;&nbsp;def func2(func):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def func3():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if sex == ‘man’:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(‘不能生孩子’)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if sex == ‘woman’:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(‘可以生孩子 ‘)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return func()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return func3&nbsp;&nbsp;&nbsp;&nbsp;return func2@func1(sex=’man’)def man():&nbsp;&nbsp;&nbsp;&nbsp;print(‘好好上班’)@func1(sex=’woman’)def woman():&nbsp;&nbsp;&nbsp;&nbsp;print(‘好好上班’)man()woman()>&gt;&gt;不能生孩子>&gt;&gt;好好上班>&gt;&gt;可以生孩子>&gt;&gt;好好上班 如果要给装饰器函数传入参数，可以在上面所示的装饰器外部再写一个函数，这个函数用来接收参数 被装饰的函数带参数 def func1(func):&nbsp;&nbsp;&nbsp;&nbsp;def func2(a,b):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(a,b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a+=5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b+=5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return func(a,b)&nbsp;&nbsp;&nbsp;&nbsp;return func2@func1def mysum(a,b):&nbsp;&nbsp;&nbsp;&nbsp;print(a+b)mysum(1, 2)>&gt;&gt;1 2>&gt;&gt;13 如果被装饰的函数需要带参数，只需要在最内部的函数传入参数即可 总结： 写一个普通的装饰器，最外部的函数用来接收函数对象，内部的函数不需要其他参数，用来返回函数调用； 写一个带参数的装饰器，在1的基础上再最外部封装一个函数，用来接收装饰器函数的参数； 写一个带参数的被装饰的函数的装饰器，最内的函数用来接收参数并返回函数的调用。我表达不好，推荐B站一个将闭包和装饰器讲得很好的教程：https://www.bilibili.com/video/av18586448?t=2207]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python函数闭包]]></title>
    <url>%2F2019%2F06%2F01%2F15_%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[函数闭包是内部函数对外部函数作用域里的变量的引用 函数内的属性都是有生命周期的，都是在函数执行期间 闭包内的闭包函数私有化了变量，完成了数据的封装，类似于面向对象 def func(): #外部函数&nbsp;&nbsp;&nbsp;&nbsp;a = 1 #外部函数作用域里的变量&nbsp;&nbsp;&nbsp;&nbsp;print(‘this is func’)&nbsp;&nbsp;&nbsp;&nbsp;def func1(num): #内部函数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(‘this is func1’)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(num+a)&nbsp;&nbsp;&nbsp;&nbsp;return func1 #函数var = func() #运行外部函数，内部函数就被创建var(2)>&gt;&gt;this is func>&gt;&gt;this is func1>&gt;&gt;3 在func里嵌套了一个func1，将func()函数的调用赋值给var，执行一条print语句，并接收func返回的func1函数对象，这时的var就相当于func1，var(2)传入参数2，调用func1，执行func1内部的代码 mylist = [1,2,3,4,5]def func(obj):&nbsp;&nbsp;&nbsp;&nbsp;print(‘func:’, obj)&nbsp;&nbsp;&nbsp;&nbsp;def func1():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj[0] += 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(‘func1:’, obj)&nbsp;&nbsp;&nbsp;&nbsp;return func1var = func(mylist)var()var()var()>&gt;&gt;func: [1, 2, 3, 4, 5]>&gt;&gt;func1: [2, 2, 3, 4, 5]>&gt;&gt;func1: [3, 2, 3, 4, 5]>&gt;&gt;func1: [4, 2, 3, 4, 5] 在这里，首先我们定义了一个mylist列表；其次定义了一个func函数，传入参数obj，执行一条print语句，在函数内部嵌套了一个func1，并将func1对象返回。在func1里，改变object索引为0的值，接着打印了obj。将mylist作为参数传给func，这里的var如上面的例子一样，相当于func1，接着调用了三次var()，可以看到每一次调用后打印的obj都在上一次调用的基础上加了1.我表达不好，推荐B站一个将闭包和装饰器讲得很好的教程：https://www.bilibili.com/video/av18586448?t=2207]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lambda匿名函数]]></title>
    <url>%2F2019%2F06%2F01%2F14_lambda%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[lambda匿名函数学习 lambda [arg1 [,arg2,…..argn]]:expression 用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。 lambda的格式：冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式。lambda返回值是一个函数的地址，也就是函数对象。 lambda与map一起使用 x = [1, 2, 3, 4]results = list(map(lambda x: x*x, x))print()>&gt;&gt;[1, 4, 9, 16] 把lambda赋值给一个变量，再利用变量来调用函数 results = lambda x, y: x+yprint(results(5, 6))>&gt;&gt;11 根据age对字典排序 infors=[{“name”:”wang”,”age”:10},{“name”:”xiaoming”,”age”:20},{“name”:”banzhang”,”age”:10}]infors.sort(key=lambda x:x[‘age’])print(infors)>&gt;&gt;[{‘age’: 10, ‘name’: ‘wang’}, {‘age’: 10, ‘name’: ‘banzhang’}, {‘age’: 20, ‘name’: ‘xiaoming’}] 把lambda作为函数返回 def add(x,y):&nbsp;&nbsp;&nbsp;&nbsp;return lambda: x+y]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[map()函数]]></title>
    <url>%2F2019%2F06%2F01%2F13_map%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[map()是Python内置的高阶函数 map函数的原型是map(function, iterable, …)，它返回一个列表 将function应用于iterable的每个元素，参数iterable是一个可迭代的对象，例如：列表，元祖，字符串 后面的省略号表示可以传很多个iterable，并行从这些参数中取元素，并调用function。 function为内置函数：将a的每个元素转化为字符串 a = [1, 2, 3, 4]fruit = list(map(str, a))print(fruit)>&gt;&gt;[‘1’, ‘2’, ‘3’, ‘4’] function为自定义函数：将a内的每个元素应用multiplication方法 def multiplication(a):&nbsp;&nbsp;&nbsp;&nbsp;b = a*a&nbsp;&nbsp;&nbsp;&nbsp;return bresults = list(map(multiplication, a))print(results)>&gt;&gt;[1, 4, 9, 16] 自定义函数传入多个参数：并行从x、y中取出元素，传入add函数中 x = [1, 2, 3]y = [4, 5, 6]def add(x, y):&nbsp;&nbsp;&nbsp;&nbsp;return x+yending = list(map(add, x, y))print(ending)>&gt;&gt;[5, 7, 9] 传入的参数元素个数不一致，map函数按元素最少的参数返回值 x = [1, 2, 3]y = [4, 5, 6, 7]def x_y(x, y):&nbsp;&nbsp;&nbsp;&nbsp;return x, youtcome = list(map(x_y, x, y))print(outcome)>&gt;&gt;[(1, 4), (2, 5), (3, 6)]]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[列表去重]]></title>
    <url>%2F2019%2F06%2F01%2F12_%E5%88%97%E8%A1%A8%E5%8E%BB%E9%87%8D%2F</url>
    <content type="text"><![CDATA[列表去重有这几种方法： 使用内置的set去重 a = [‘b’, ‘a’, ‘b’, ‘d’, ‘c’, ‘a’]b = list(set(a))print(b)>&gt;&gt;[‘a’, ‘b’, ‘c’, ‘d’] 使用字典 c = list({}.fromkeys(a).keys())print(c)>&gt;&gt;[‘a’, ‘b’, ‘c’, ‘d’] 使用以上两种方法，可以观察到输出后的列表元素的顺序被打乱了，如果想要列表保持原来的顺序，可以这样做： b.sort(key=a.index)print(‘排序后的b：’,b)d = sorted(c, key=a.index)print(‘排序后的c：’,d)>&gt;&gt;排序后的b： [‘b’, ‘a’, ‘d’, ‘c’]>&gt;&gt;排序后的c： [‘b’, ‘a’, ‘d’, ‘c’] 列表去重，不改变原列表的顺序 d = []for x in a:&nbsp;&nbsp;&nbsp;&nbsp;if not x in d:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.append(x)print(d)>&gt;&gt;d： [‘b’, ‘a’, ‘d’, ‘c’] 列表推导式的写法 f = []g = [f.append(y) for y in a if y not in f]print(‘f:’,f)>&gt;&gt;f: [‘b’, ‘a’, ‘d’, ‘c’]]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[糟糕的五月]]></title>
    <url>%2F2019%2F05%2F31%2F17_%E7%B3%9F%E7%B3%95%E7%9A%84%E4%BA%94%E6%9C%88%2F</url>
    <content type="text"><![CDATA[糟糕的五月，糟糕的学习，糟糕的爱情。五月，并不是多么绚烂多姿，相反，糟糕得一塌糊涂。学习，没有任何进步，爱情，刚结束不靠谱的网恋。我想，大概是从班里发的实习单位汇总开始，学习就乱了阵脚。学习，没有好的计划，或者又常常把计划打乱。爬虫没有一点进步，数据分析也太难做不走，英语六级真是错得惨不忍睹。我常常很慌，心情也是大起大落，脾气也不好，尤其是对室友，每次发完脾气后又很后悔。我想，大概是从他的出现开始，我就变了，从女汉子变得小鸟依人。习惯了一个人的我，居然也想像个孩子一样黏着他。可能是我太作了，一天到晚就像黏着对方，一天到晚就在瞎几把乱想是不是他不爱我，可能我这样捣蛋的次数太多了，惹得他厌烦了。我只是想让你多陪陪我啊。也可能他真的不爱我，除了谈到他的工作和他的前女友会滔滔不绝之外，对我是爱搭不理。在五月的最后两三天，我们似乎默认就这样结束了。或许也没有开始，只是我还以为自己恋爱了呢。倒数第三天，我发现他好像真的骗了我；倒数第二天，他说了两句话，我说了一句话；最后一天，我们一句话都没有了。可能是他累了吧，厌烦我的这种行为了。我本来是等你的一句话，或者一个电话，结果你头也不回。谁都不愿意当舔狗，所以我们就这样over了。还记得刚开始的时候真的像恋爱一样，打个电话居然能让人兴奋得失眠。上课也在想你，看书也在想你，睡觉的时候也在想你。我也没想到，居然有一天我也会网恋，比初恋还更美好的感觉，可是后来你就渐渐地“忙”起来了，渐渐地烦了。开始很甜蜜，后来连晚安都没有了；刚开始是喜欢，后来只是习惯。我还是很幼稚，总会想明明是你追的我，为什么最后我却动心你就离开了；我还是很幼稚，注销了账号，卸载了那个我们认识的APP；我还是很幼稚，去翻看我们的聊天记录，看我给你画的涂鸦。我想你不爱我吧，从一开始就是骗人的，果然我喜欢会撩的男的呢。不过，我想告诉你，你真傻，真的错过了我这么好的女人，大概以后你再也找不到比现在的我更爱你的人了。我会收起所有的伤心，好好学习。毕竟什么都没脱贫重要。六月，好好学爬虫，好好考英语，好好准备期末考试，好好写简历，好好找实习。我爱学习！我爱学习！我爱学习！]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>日记</tag>
        <tag>心情</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中的赋值、浅拷贝和深拷贝]]></title>
    <url>%2F2019%2F05%2F21%2F11_Python%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[今天看了很多爬虫面试题，太尴尬了，几乎都不会，红红火火恍恍惚惚哈哈哈哈，所以我赶紧来查漏补缺了——学习Python中的拷贝啦！每天默念三遍：我爱学习！我爱学习！我爱学习！ Python中的赋值只是引用了变量，不会占用新的内存 浅拷贝有三种形式： 完全切片 list()函数 copy模块中的copy()函数 深拷贝：copy模块中的deepcopy()函数 import copya = [1,2,3,4,[‘x’,’y’]]b = a # 赋值# 浅拷贝c = a[:] # 1、切片d = list(a) # 2、工厂函数e = copy.copy(a) # 3、copy函数# 深拷贝f = copy.deepcopy(a)print(id(a),id(b),id(c),id(d),id(f),id(e))>>> 69613192 69613192 69613704 69614728 69613768 69614792a.append(5)print(a) # a添加了一个元素>>> [1, 2, 3, 4, [‘x’, ‘y’], 5]print(b) # b跟着添加了一个元素>>> [1, 2, 3, 4, [‘x’, ‘y’], 5]print(c) # c、d、e保持不变>>> [1, 2, 3, 4, [‘x’, ‘y’]]print(d)>>> [1, 2, 3, 4, [‘x’, ‘y’]]print(e)>>> [1, 2, 3, 4, [‘x’, ‘y’]]print(f) # f保持不变>>> [1, 2, 3, 4, [‘x’, ‘y’]] 我们在这里定义了一个列表a，a里面第五个元素嵌套了一个列表，使用a.append()函数给a添加了一个元素。被赋值的b跟着添加了一个元素，并打印了a、b的id，说明被赋值的b只是对a的引用，被浅拷贝的c、d、e和被深拷贝的f都没有发生变化。 print(‘*‘*30)a[4].append(‘z’)print(a) # a索引为4所在的列表内部添加了一个元素z>>> [1, 2, 3, 4, [‘x’, ‘y’, ‘z’], 5]print(b) # b索引为4的元素内部跟着添加了一个元素z>>> [1, 2, 3, 4, [‘x’, ‘y’, ‘z’], 5]print(c) # c、d、e的内部元素添加了元素z>>> [1, 2, 3, 4, [‘x’, ‘y’, ‘z’]]print(d)>>> [1, 2, 3, 4, [‘x’, ‘y’, ‘z’]]print(e)>>> [1, 2, 3, 4, [‘x’, ‘y’, ‘z’]]print(f) # f纹丝不动，没有添加任何值>>> [1, 2, 3, 4, [‘x’, ‘y’]]print(id(a),id(b),id(c),id(d),id(f),id(e)) 在这里，我们对a嵌套的列表进行了追加元素的操作，被赋值的b和被浅拷贝的c、d、e都发生了变化，而f依然保持不变。 总结： 不管是对变量外层还是内层进行操作，赋值都会跟着变化 只有对变量内层元素进行操作时，浅拷贝才会发生变化 无论原列表如何变化，深拷贝保持不变]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python爬取腾讯四川新闻]]></title>
    <url>%2F2019%2F05%2F20%2F10_%E8%85%BE%E8%AE%AF%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[周六我去参加初中英语教师资格的面试了，然而，我很怂，在结结巴巴答完结构化问题之后，居然告诉考官：我放弃！考官都震惊了！我真的很怂啊，我觉得我的教案写得非常巴适，可是当你站在讲台上的时候真的什么都讲不出来，也不是紧张，感觉就是很尴尬，匆匆说完原因后我就离场了，虽然我一大早就起床了，在大姨妈问候你的情况下，还排了很久的队，成为考场的最后一位考生。可能我真的不适合，或者又是因为我缺乏这种公开站在大家面前的锻炼。我妈说我只会纸上谈兵，我难得一次赞成她的观点。So much for that day！We should stop here and go to study ‘Python Spider’！在堕(受)落(到)了(hr)两(打)周(击)两周后，终于奋发图强，开始了正儿八经的学习！我爱学习！ 目标 为了练习Selenium和Beautiful Soup 为了获取腾讯四川新闻的相关数据 准备工作在谷歌浏览器中打开网址 https://new.qq.com/d/cd 你会发现页面是通过ajax加载的，可以查看网页源代码发现并没有数据，这时可以你可以尝试找接口或者用selenium + chrome的方式来动态爬取页面数据，今天为了练习selenium，所以就用了selenium来抓取。 开始抓取 先导入需要的模块，然后定义了一个腾讯新闻爬虫类，设置了chromedriver的路径 定义了一个get_one_page()方法，向 https://new.qq.com/d/cd 发送请求。这里定义了一个循环，让代码一直执行下拉操作。一直滑，滑到页面底端，你可以看到页面是是这样的，所以我们在循环内部设置了一个判断方法，当出现“返回腾讯网这几个字的时候，我们就让它停掉。 第二个方法parse_one_page()，用Beautiful Soup库解析页面，获取新闻标题链接，因为在爬取过程中报了Index Error，所以我们在这里进行了异常处理 get_second_page()方法，用requests库发起请求，解析页面，获取文章标题，文章内容和发布时间 save_to_mongo()方法，用pymongo连接数据库，将数据存储到数据库Tencent下的集合News内 成果展示 调用API如果你不想用selenium，你可以获取接口数据，shift+f12，看到这个rcd?开头的文件，右边就是一条条新闻的相关数据，查看他的headers，找到请求的url，有个page参数可实现翻页操作。 每天进步一点点，年薪百万！！！]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小舒的最近两天]]></title>
    <url>%2F2019%2F05%2F10%2F05_%E6%94%BE%E5%BC%83%E7%9A%84%E6%97%B6%E5%80%99%2F</url>
    <content type="text"><![CDATA[众生皆苦，我也苦暴躁小舒，在线怼人，连hr都怼了，我怕是不想活了。想了一下这篇博客的标题应该叫什么好，是“小舒与简历斗智斗勇”，还是“小舒与招聘网站殊死搏斗”，最后还是想了这个。啊，我真的好丧啊，从一大早就开始丧了。大多数时候，痛苦和悲哀都来自于家庭，我真的好想离他们远远的啊。我自己也很烦啊，摆脱就不要再给我传递这些令人头疼的消息了吧。我觉得我真的要放弃了，我做了这么久的努力都是白费的，在找实习的时候一个都找不到。我们本来就是普罗大众，谈什么改变命运，改变不了的。我不想再努力了，放弃的时候真的很舒服。一时堕落一时爽，一直堕落一直爽。你知道吗？我昨天玩屎了，想不到吧，哈哈哈，其实我就吃了个芒果，但是吃个芒果就跟他妈玩屎一样，弄得我一身都是。不过任何人都逃不过真香定律，虽然确实很恶心，但是真的好吃呀，我说的是芒果好吃。昨天和老王差点吵架了，他感觉我很幼稚，很无理取闹吧，但是他应该不知道我有多喜欢他吧。我很想他，上课想、看书想、睡觉也想，我想跟他说话，我也想跟他撒娇，明明我就不是这种人，遇到他居然变成这样了，我好讨厌自己啊啊啊啊。我买了四本故事书，本来是要寄给他让他给我讲睡前故事的，他肯定害怕我是女骗子，所以只有买来自己给他讲睡前故事了，这个男人坏的很呐。如果哪天我不愿意跟他撒娇了，那么他也和其他人没什么区别了，不过，现在，娘爱你（づ￣3￣）づ╭❤～]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>日记</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五月伊始]]></title>
    <url>%2F2019%2F05%2F02%2F09_%E4%BA%94%E6%9C%88%E4%BC%8A%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[我以为世界在等着我长大，没想到是时间推着我向前感觉时间飞逝啊！上一次写博客已经是很久前的事了吧！四月已经结束了！五月又匆匆忙忙地来了！我还是没有什么进步。这个月计算机二级的成绩也要出来了，英语教师资格证面试也快了，最重要的是，七月就要去实习了，五月就要报名是集中实习还是分散实习了，所以我，得开始准备面试了。不管是爬虫还是新闻，简历都备起来了。在写简历的时候才发现自己什么也写不上去。可是生活还是要继续啊，我在努力啊。我也想把年薪过万变成现实啊，想去旅游，想带奶奶吃好吃的，想带弟弟玩好玩的。最近，我是被恋爱冲昏了头脑吧，不！我还没恋呢，不过为什么我那么依赖他，居然在他面前变成了一个小女生？？？what fuck？？？我怎么会变成这种人？？？我不能这样啊，我要好好学习啊，不能浪费时间了。今天他说带我回家过年，虽然我知道可能是玩笑话，不过我还是认真的告诉了他我不愿意。我不是觉得自己要和很优秀（高富帅）的人在一起，毕竟我自己也不怎样，好男人又没瞎眼，毕竟物以类聚，人以群分，可是我还是不想结婚，不是和谁的问题，是我不想。我想象不出来自己结婚后是怎样的？我都怀疑自己要单身一辈子了！也遇不到一个合适的，我觉得就应该听妈妈的话，好好地去相亲，毕竟妈妈看上的人家都不是很差。 不不不！谈什么儿女情长，在这个年龄就应该巨富！！！好好努力吧，老老实实写代码，勤勤恳恳找实习！ （づ￣3￣）づ╭❤～]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>日记</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网易云单曲评论]]></title>
    <url>%2F2019%2F05%2F02%2F08_%E7%BD%91%E6%98%93%E4%BA%91%E5%8D%95%E6%9B%B2%E8%AF%84%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[眼看着7月份就要去实习了，还不知道做什么呢，什么都还不会呢，打算着找个爬虫的实习吧，但是我这点水平应该不行吧，所以又来写了个网易单曲评论爬虫。感觉好！不能这么丧！振作！快醒醒！起来撸代码啦！看了一下网易云，以陈雪凝的《绿色》为例，F12键找到了这个R_SO_4_1345848098?csrf_token=，并且点开发现了里面就是我们想要的评论数据再查看请求头,这个requet url：https://music.163.com/weapi/v1/resource/comments/R_SO_4_1345848098?csrf_token=看request method是以post方式提交的然后我屁颠儿屁颠儿地点了个翻页，在评论翻页的时候这个request url并没有刷新！！！没有刷新那这个翻页的操作怎么做？是用selenium还是…？看下面的表单数据应该是经过加密的，所以我在网上百度了一下，果然有大佬破解这个算法加密，参考：https://www.zhihu.com/question/36081767这是算法解密的代码，都是大佬们牛逼啊！我就稍微改了一下，并且把数据存储到MongoDB 完整代码地址见：https://github.com/Awake2714/WangyiComment 不过有点问题的是，我发现在爬到400多页的时候就没数据了，虽然代码一直在跑，而且也没有被ban，但是就是没拿到数据，所以这是怎么回事？是不是像豆瓣一样，评论只能拿取500条？有没有小伙伴知道呀？]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用scrapy框架下载煎蛋网图片]]></title>
    <url>%2F2019%2F04%2F18%2F07_jandan%2F</url>
    <content type="text"><![CDATA[每次写完代码后都感觉自己人老珠黄啊，该拿什么拯救我的老脸？？ spider.py这部分很简单，只需要获取图片链接和下一页的链接就可以了 item.py import scrapyclass JiandanItem(scrapy.Item):&ensp;&ensp;&ensp;&ensp;img = scrapy.Field() pipelines.py这一部分比较重要，scrapy提供了ImagesPipeline，我们只需要继承自这个类，重写其中的一些方法，scrapy就会为我们下载图片了。 settings.py在settings.py里开启相关配置 部分图片展示因为煎蛋网反爬措施没那么厉害，所以很快“唰唰唰”的就下载完了一共四千多张图片，慢慢欣赏吧 biu~ (๑´ڡ`๑)]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫设置随机请求头和代理]]></title>
    <url>%2F2019%2F04%2F11%2F03_%E7%88%AC%E8%99%AB%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BA%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[我在设置爬虫代理和请求头时，真是遇到了很多坑啊，自己一个人自学，又没人交流，自己又是一个没有耐心的人，简直要爆炸了终于，今天晚上好好地静下来慢慢捋了一下代码！终于，似乎从这个坑出来了！先来说说用requests库设置吧，随机请求头我用的是fake-useragent这个包先用httpbin.org/get这个网址测试了一下就这样设置就可以正确输出了，开始我设置的时候居然直接写的 headers=ua.random 我真的要哭死啊！！！一定要记得构造字典！！！ 设置代理，我买的蘑菇代理，感觉还挺划算的，按数量买1000个6块钱，毕竟测试也用不完这么多，永久有效，爬完某宝后我都还剩700多个；按数量感觉不太划算，一天2000个6块钱吧，不过我也用不完，当然如果你需求大的话另当别论，土豪也请随意哈哈哈这里的坑也很多啊，请求了好多次后都不成功，我把ip打印了一下，好像确实有点问题，不过还是不知道问题确切所在，所以又打印了一下长度，果然！！！里面有个换行符和回车！！！我的娘啊！！！我枯了皇天不负有心人，终于搞好了 接下来终于在scrapy框架里面设置这两个中间件了在网上看到好多方法，自己也懵逼，试了一下，这样也行的：request.headers[‘User-Agent’] = self.ua.random不过我真是傻！这样好像是真的不行！不行！会报错的！request.meta[‘headers’] = {‘User-Agent’: ua.random}因为有些请求是不需要代理的，所以查了一下说什么重写make_requests_from_url()方法，设置meta={‘download_timeout’: 10}，但是不知道为什么我的就是不行，所以干脆没有设置了，如果有大佬知道是怎么回事可不可以告诉我一下啊。 另外我是想运行这个代理池的，但是老是报错，实在不知怎么回事啊[泪奔]]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy爬取某宝商品信息]]></title>
    <url>%2F2019%2F04%2F11%2F04_scrapy%E7%88%AC%E5%8F%96%E6%9F%90%E5%AE%9D%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[在多次踩坑后，终于写好我的爬虫了。说说我遇到的问题:第一就是在scrapy框架里设置随机请求头中间件第二也是中间件，代理中间件，关于这两点可以参考我的博客：爬虫设置随机请求头和代理这两个问题真的困扰了我超级久啊。解决好这两个问题好，我的爬虫终于运行起来啦啦啦贴一下我的部分代码，嘿嘿嘿 目录文件夹结构 taobao.py重写 start_requests() 方法parse()方法 解析商品信息 items.py你要存储的字段 middlewares.py随机请求头 UserAgentMiddleware代理 ProxyMiddleware settings.py pipelines.py存储数据到Mongodb run.py最后就可以运行啦 python run.py运行结束后的部分数据是这样的哈哈哈 代码地址：https://github.com/Awake2714/Taobao]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[四分之一]]></title>
    <url>%2F2019%2F03%2F30%2F06_%E5%9B%9B%E5%88%86%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[今天是3月的倒数第二天，也是2019四分之一快要结束的倒数第二天。时间过得可真快呀，忙碌的3月终于结束了。以为自己多努力，其实就考了教师资格证和计算机二级，结果怎样也不知道。三月，我习惯了戴上耳机，坐在电脑前的日子；三月，我的生物钟不允许我睡懒觉；三月，把我从熟人社交和陌生人社交中解救出来。大概成长就是逐渐失去联系，大概成长就是在自己以前吹过牛逼的地方填坑癞蛤蟆永远变不成天鹅的，不管你多拼，有些东西天生就注定了。四月，看似清闲，但却有好多事没有做，从何下手，毫无头绪。所以，我们加油吧，希望大家都不要忘记年初立下的flag[牛逼];希望大家2019好好学习[填坑]，好好生活，硕果累累！]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快让我冷静一下]]></title>
    <url>%2F2019%2F03%2F17%2F01_%E5%BF%AB%E8%AE%A9%E6%88%91%E5%86%B7%E9%9D%99%E4%B8%80%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[呜呜呜，太激动了，我快要抑制不住自己的兴奋了在经过so many bugs后我的博客终于问世了本来第一次已经搭建好了，可是在做主题美化时不知道哪里出了问题，导致页面无法正常显示了，对于我一个菜鸟而言，感觉还是直接重来比较快捷，索性把GitHub上的仓库给删了，重新来过。第二次搭建时自然比第一次轻松了许多，在网上找了很多大佬的博客，一步一步地来，虽然中间的坑很多，但终于大致完成了美化工作最后买了个域名，将GitHub域名关联起来，由于昨天没有认证，搞了半天都不知道问题在哪儿。今天晚上又来搞了一下，啊啊啊，终于完成了，太激动了还有一个评论功能没有添加，好像有点麻烦，过段时间再来搞吧]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[王子]]></title>
    <url>%2F2019%2F03%2F17%2F02_%E7%8E%8B%E5%AD%90%2F</url>
    <content type="text"><![CDATA[我的博客终于搭建好了，呜呜呜，哭唧唧搭，忍不住要发第一篇博文 在这春天，总是有人让我记起高中时我们班的那位“王子”（真名：王子X）。他恰如我笔下所描绘的那样……他的身上总是能散发出一种味道，那味道是。。。他走路总是有一种气质，摇摇欲坠，翩翩欲倒他擦鼻涕有一种独特的方式，袖子一提，手横起一揩，没了他总是有吃不完的辣条[羡慕]，偶尔嘴上还留有油渍他能修电脑，总是受到语文老师独一无二的青睐，比如，某天，偷偷地（不，不知他有什么独特的方法）溜出校门去买午餐还是晚餐来着，坐在某幢楼的角落秀色可餐的吃起来，然后…就被我们语文老师逮个正着语文老师用自己婀娜的身姿，迷人的手势，忍俊不禁的笑容向我们讲及这件事高一还是高二来着，我们十分有幸分到了一个小组，当时班主任叫我们给自己组想一个口号，别的小组都是什么“赶莺超美”（传说中我们班的学霸），而我们组的却是：清新口气，你我更亲近然而…如今…历史总是惊人的相似…我…have no words我犹记得，高中学校外有一家饰品店，外面拉了一条横幅，大意是“一直被模仿，从未被超越”yes，目前，他奶奶的，我深刻地把前半句话理解得透彻透底most important！THIS IS NOT THE FIRST TIME!!!莫非？我的idea太好了？我常常因为自己过于优秀而感到苦恼 我抄你个奶奶的腿儿的 最后！是王子走进了这家店吗？？？]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
